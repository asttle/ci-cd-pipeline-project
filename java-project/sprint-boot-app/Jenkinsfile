pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
// Checkout is not needed as we are definiNG Jenkinsfile within the source code repo
    stage('Checkout') {
      steps {
        sh 'echo passed' 
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
// Go to source code folder and build jar diff between mvn clean install and package is 
// mvn clean install will compile, test and package the code and push to artifact repository(local), but mvn clean package will only compile, test and package the code and not push to artifact repository
    stage('Build and Test') {
      steps {
        // build the project and create a JAR file
        sh 'cd java-project/spring-boot-app && mvn clean package'
      }
    }
// withCredentials take the secret from jenkins credentials and store it in the variable
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.111.23.151:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-project/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
// Build and push the docker image to docker hub with help of docker creds
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "asttle/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker')
      }
      steps {
        script {
            sh 'cd java-project/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker") {
                dockerImage.push()
            }
        }
      }
    }
// login to github go to repo and update the deployment file with the new image tag
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "ci-cd-pipeline-project"
            GIT_USER_NAME = "asttle"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "asttle1997@gmail.com"
                    git config user.name "Asttle"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-project/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
